syntax = "proto2";
package PlayerProtocol;

message ChatContent{
	required uint64 chatId				= 1;	//信息Id
	required int32 channel				= 2;	//频道, 1-世界, 2-国家, 3-联盟, ...
	required int32 contentType			= 3;	//1-文本, 2-语音
	required bytes	content				= 4;	//暂时语音内容也存这
	required uint32 sendTime			= 5;	//发送时间戳
	required uint64 channelId			= 6;	//频道Id（国家Id、联盟Id）
	optional uint64 senderId			= 7;	//玩家Id
	optional string senderName			= 8;	//玩家名称
	optional int32 senderHeadId			= 9;	//玩家头像
	optional uint64 senderActorId		= 10;	//玩家城池Id
	optional bool bNeedSaveHistory		= 11;	//是否存历史（服务端使用）
	optional string packageChannelId    = 12;	//漫灵渠道包标识（服务端使用）
}

message ChatData {
	required uint32 channel 			= 1;	//频道, 1-世界, 2-国家, 3-联盟, ... 
	required uint64 channelId			= 2;	//频道Id（国家Id、联盟Id）
	repeated ChatContent chatlist 		= 3;
	optional uint32 nLoadState			= 4;	//0-未加载完，1-已加载完
}

//聊天禁言
message ChatAbandon {
	required uint64 nCityId 		= 1; //玩家城池Id
	required uint32 nExpiredTime 	= 2; //禁言到期时间
}

/////////////////////////C2S//////////////////////////////
message HeartBeat{
}

//查看玩家信息
message ReqViewPlayerInfo {
	required uint64 nTargetId			= 1;	//玩家城池Id
	required uint32 nViewMode			= 2;	//查看模式: 9001=私聊玩家信息
}

message ChangeName{
	required string name = 1;
}

message CheckChangeName{
	required string name = 1;
}

message ChangeHead{
	required uint32 headId = 1;
}

message ReqTalkMsg{
	required int32 channel				= 1;	//频道, 1-世界, 2-国家, 3-联盟, ...
	required int32 contentType			= 2;	//1-文本, 2-语音
	required string	content				= 3;	//暂时语音内容也存这
	optional uint64 targetId			= 4;	//有私聊功能？
	optional string packageChannelId = 5; //漫灵渠道包标识（服务端使用）
}

message ReqTalkHistory{
	required int32 channel				= 1;	//频道, 1-世界, 2-国家, 3-联盟, ...
	optional uint64 channelId			= 2;	//频道Id（国家Id、联盟Id）
	required uint64 chatId				= 3;	//信息Id
}

message ReqServerTime {
	
}

message ReqLoginToken {
	
}

/////////////////////////S2C//////////////////////////////
message PlayerInfo {
	required uint64 nCharId			= 1;	//玩家Id
	required string sCharName		= 2;	//玩家名称
	required int32 nHeadId			= 4;	//玩家头像
	optional uint32 nOnlineState	= 5;	//在线状态
	optional uint32 nOfflineTime	= 6;	//最后登出时间
}
message RetViewPlayerInfo {
	required uint32 nResult				= 1;
	optional PlayerInfo oPlayerInfo		= 2;
	required uint32 nViewMode			= 3;
}


message SyncPlayerBaseData{
	required uint32 type = 1;
	optional uint32	value1 = 2;
	optional string	value2 = 3;
	optional uint64 value3 = 4;
}


message RetTalkMsg{
	required int32 channel				= 1;
	optional uint64 channelId			= 2;
	required int32 nResult				= 3;
	optional uint32 nDisableTime		= 4;
}

message SyncTalkMsg{
	required ChatContent chat 			= 1;
}

message SyncServerTime {
	required uint32 serverTime = 1;
	optional int32 nZoneDiffSecond = 2; //服务器所在时区与0时区（格林威治时间）秒数差
}


message SyncNotice{
	required string notice 			= 1; //公告内容
	optional uint32 nNoticeType 	= 2; //公告类型ESyncNoticeType
	optional uint64 nTargetId 		= 3; //目标城池Id
	optional uint32 nParam1 		= 4; //目标参数1
	optional uint32 nParam2 		= 5; //目标参数2
}


message ErrorCode{
	required uint32 errorId = 1;
}

//系统提示
message SyncSystemTip {
	required uint32 nTipCode 		= 1; //提示码，默认0为语言包格式化提示，其他枚举开发时再自行定义
	repeated bytes vTipParamList 	= 2; //格式化参数列表
	optional uint32 nLangId			= 3; //lang表, nTipCode=0时有值
	optional uint32 nLangContent	= 4; //lang表内容索引, nTipCode=0时有值 最后文本:gLang{LangId}.format({nLangContent}, table.unpack({vTipParamList}))
}


//同步重连登录校验码
message SyncLoginToken {
	optional string	sLoginToken		= 1; //玩家断线重连校验码断线重连时用，重连登录时RequestLogin.name=SyncLoginToken.sLoginToken）
}
